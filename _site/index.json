{
  "api/WeatherApp.Form1.html": {
    "href": "api/WeatherApp.Form1.html",
    "title": "Class Form1 | Monsieur Momo",
    "summary": "Class Form1 Namespace WeatherApp Assembly WeatherApp.dll public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.Menu Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiParent Form.MergedMenu Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnGotFocus(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.RescaleConstantsForDpi(int, int) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Events Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Form1() Initializes a new instance of the Form1 class. public Form1() Remarks This constructor performs the following actions: Loads environment variables using the Load(string, LoadOptions) method. Initializes the form components. Sets up the list of cities by calling WeatherApp.Form1.InitializeCities(). If an error occurs during initialization, a message box is displayed with the error details. Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/WeatherApp.OpenWeather.OpenWeather_API.html": {
    "href": "api/WeatherApp.OpenWeather.OpenWeather_API.html",
    "title": "Class OpenWeather_API | Monsieur Momo",
    "summary": "Class OpenWeather_API Namespace WeatherApp.OpenWeather Assembly WeatherApp.dll public class OpenWeather_API Inheritance object OpenWeather_API Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties APIKey public string APIKey { get; set; } Property Value string BaseUrl public string BaseUrl { get; set; } Property Value string CityName public string CityName { get; set; } Property Value string Language public string Language { get; set; } Property Value string Mode public string Mode { get; set; } Property Value string Units public string Units { get; set; } Property Value string Methods API_Call_Output() public Task<string> API_Call_Output() Returns Task<string> API_Call_Url() public string API_Call_Url() Returns string"
  },
  "api/WeatherApp.OpenWeather.html": {
    "href": "api/WeatherApp.OpenWeather.html",
    "title": "Namespace WeatherApp.OpenWeather | Monsieur Momo",
    "summary": "Namespace WeatherApp.OpenWeather Classes OpenWeather_API"
  },
  "api/WeatherApp.html": {
    "href": "api/WeatherApp.html",
    "title": "Namespace WeatherApp | Monsieur Momo",
    "summary": "Namespace WeatherApp Classes Form1"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Monsieur Momo",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Monsieur Momo",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Monsieur Momo",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "packages/DotNetEnv.3.1.1/README.html": {
    "href": "packages/DotNetEnv.3.1.1/README.html",
    "title": "dotnet-env | Monsieur Momo",
    "summary": "dotnet-env A .NET library to load environment variables from .env files. Supports .NET Core and .NET Framework (4.6+). Installation Available on NuGet Visual Studio: PM> Install-Package DotNetEnv .NET Core CLI: dotnet add package DotNetEnv Usage Load env file Load() will automatically look for a .env file in the current directory by default, or any higher parent/ancestor directory if given the option flag via TraversePath() DotNetEnv.Env.Load(); DotNetEnv.Env.TraversePath().Load(); Or you can specify the path directly to the .env file, and as above, with TraversePath(), it will start looking there and then look in higher dirs from there if not found. DotNetEnv.Env.Load(\"./path/to/.env\"); It's also possible to load the (text) file as a Stream or string or multiple files in sequence using (var stream = File.OpenRead(\"./path/to/.env\")) { DotNetEnv.Env.Load(stream); } DotNetEnv.Env.LoadContents(\"OK=GOOD\\nTEST=\\\"more stuff\\\"\"); // will use values in later files over values in earlier files // NOTE: NoClobber will reverse this, it will use the first value encountered! DotNetEnv.Env.LoadMulti(new[] { \".env\", \".env2\", }); Accessing environment variables The variables in the .env can then be accessed through the System.Environment class System.Environment.GetEnvironmentVariable(\"IP\"); Or through one of the helper methods: DotNetEnv.Env.GetString(\"A_STRING\"); DotNetEnv.Env.GetBool(\"A_BOOL\"); DotNetEnv.Env.GetInt(\"AN_INT\"); DotNetEnv.Env.GetDouble(\"A_DOUBLE\"); The helper methods also have an optional second argument which specifies what value to return if the variable is not found: DotNetEnv.Env.GetString(\"THIS_DOES_NOT_EXIST\", \"Variable not found\"); Additional arguments You can also pass a LoadOptions object arg to all DotNetEnv.Env.Load variants to affect the Load/Parse behavior: new DotNetEnv.LoadOptions( setEnvVars: true, clobberExistingVars: true, onlyExactPath: true ) However the recommended approach is with a fluent syntax for turning flags off such as: DotNetEnv.Env.NoEnvVars().NoClobber().TraversePath().Load(); All parameters default to true, which means: setEnvVars, first arg: true in order to actually update env vars. Setting it false allows consumers of this library to process the .env file but use it for things other than updating env vars, as a generic configuration file. The Load methods all return an IEnumerable<KeyValuePair<string,string>> for this, but there is an extension method ToDotEnvDictionary() to get a dict with the last value for each key. KEY=value var kvps = DotNetEnv.Env.Load( options: new DotNetEnv.Env.LoadOptions( setEnvVars: false ) ) // or the recommended, cleaner (fluent) approach: var dict = DotNetEnv.Env.NoEnvVars().Load().ToDotEnvDictionary(); // not \"value\" from the .env file null == System.Environment.GetEnvironmentVariable(\"KEY\") \"KEY\" == kvps.First().Key \"value\" == kvps.First().Value With CreateDictionaryOption you can change behavior of ToDotEnvDictionary to take either the First value or to throw on duplicates. With the TakeFirst options you can simulate NoClobber-behavior. clobberExistingVars, second arg: true to always set env vars, false would leave existing env vars alone. KEY=value System.Environment.SetEnvironmentVariable(\"KEY\", \"really important value, don't overwrite\"); DotNetEnv.Env.Load( options: new DotNetEnv.Env.LoadOptions( clobberExistingVars: false ) ) // or the recommended, cleaner (fluent) approach: DotNetEnv.Env.NoClobber().Load(); // not \"value\" from the .env file \"really important value, don't overwrite\" == System.Environment.GetEnvironmentVariable(\"KEY\") exactPathOnly, third arg: true to require .env to be in the current directory if not specified, or to match the exact path passed in, false would traverse the parent directories above the current or given path to find the nearest .env file or whatever name was passed in. This option only applies to Env.Load that takes a string path. See DotNetEnvTraverse.Tests for examples. // the recommended, cleaner (fluent) approach: DotNetEnv.Env.TraversePath().Load(); Using .NET Configuration provider Integrating with the usual ConfigurationBuilder used in .NET is simple! var configuration = new ConfigurationBuilder() .AddDotNetEnv(\".env\", LoadOptions.TraversePath()) // Simply add the DotNetEnv configuration source! .Build(); The configuration provider will map __ as : to allow sections! .env file structure All lines must be valid assignments or empty lines (with optional comments). A minimal valid assignment looks like: KEY=value There can optionally be one of a few export or equivalent keywords at the beginning and there can be a comment at the end, values can be quoted to include whitespace, and interpolated references can be included (unquoted values as well as double quoted, with optional braces in both cases -- but often more useful in unquoted), like: export KEY=\"extra $ENVVAR value\" # comment set KEY2=extra${ENVVAR}value # comment The options for the export keyword are: export # bash set # windows cmd SET # windows cmd set -x # fish This allows the .env file itself to be source-d like . .env to load the env vars into a terminal session directly. The options for quoting values are: \"\" double: can have everything: interpolated variables, plus whitespace, escaped chars, and byte code chars '' single: can have whitespace, but no interpolation, no escaped chars, no byte code chars -- notably not even escaped single quotes inside -- single quoted values are for when you want truly raw values unquoted: can have interpolated variables, but only inline whitespace, and no quote chars, no escaped chars, nor byte code chars As these are the options bash recognizes. However, while bash does have special meaning for each of these, in this library, they are all the same, other than that you do not need to escape single quote chars inside a double quoted value, nor double quotes inside single quotes. As a special note: if a value is unquoted, it can still include a # char, which might look like it is starting a comment, like: KEY=value#notcomment #actualcomment This is how bash works as well: export TEST=value#notcomment #actualcomment env | grep TEST # TEST=value#notcomment However, unlike bash, a # directly after the = will be recognized as a comment: KEY=#yesacomment This is because whitespaces between = and the value are allowed by this library, which is not allowed in bash. This prevents confusion between KEY=#comment and KEY= #comment, which is expected to give the same result when leading whitespaces before the value are allowed. Also unlike bash, inline whitespace is allowed so you can do: KEY=value#notcomment more words here # yes comment \"value#notcomment more words here\" == System.Environment.GetEnvironmentVariable(\"KEY\") You can also declare unicode chars as byte codes in double quoted values: UTF8 btes: \"\\xF0\\x9F\\x9A\\x80\" # rocket \uD83D\uDE80 UTF16 bytes: \"\\uae\" # registered ® UTF32 bytes: \"\\U1F680\" # rocket \uD83D\uDE80 Capitalization on the hex chars is irrelevant, and leading zeroes are optional. And standard escaped chars like \\t, \\\\``, \\n`, etc are also recognized -- though quoted strings can also be multi line, e.g.: KEY=\"value and more\" OTHER='#not_comment line2' Loaded gives: \"value\\nand more\" == System.Environment.GetEnvironmentVariable(\"KEY\") \"#not_comment\\nline2\" == System.Environment.GetEnvironmentVariable(\"OTHER\") You can also include whitespace before and after the equals sign in assignments, between the name/identifier, and the value, quoted or unquoted. Note that the pre/trailing and post/leading whitespace will be ignored. If you want leading whitepace on your values, quote them with whitespace. WHITE_BOTH = value WHITE_QUOTED=\" value \" Loaded gives: \"value\" == System.Environment.GetEnvironmentVariable(\"WHITE_BOTH\") \" value \" == System.Environment.GetEnvironmentVariable(\"WHITE_QUOTED\") Note that bash env vars do not allow white space pre or post equals, so this is a convenience feature that will break sourcing .env files. But then, not all of this is 100% compatible anyway, and that's ok. Note that other .env parsing libraries also might have slightly different rules -- no consistent rules have arisen industry wide yet. A Note about Production and the Purpose of This Library You should not be using a .env file in production. The purpose of this library is to enable easy local development. Your dev team should have a .env with localdev testing credentials/etc stored in some secure storage -- 1pass/lastpass or s3 bucket or something like that. Then every developer gets a copy of that file as part of onboarding that they save into their project dir that uses DotNetEnv to get env vars for configuration. When the application is deployed into production, actual env vars should be used, not a static .env file! This does mean that env vars, and thus this library, are only useful for load time configuration -- not anything that changes during the lifetime of an application's run. (You should load env var values during startup or on first access and not look them up more than once during the application's lifetime.) Admittedly, this is best practices advice, and if you want to use .env files in production, that's up to you. But at least I have told you so. :) Issue Reporting If you have found a bug or if you have a feature request, please report them at this repository issues section. Contributing Run dotnet test to run all tests. Or some more specific test examples: dotnet test --filter \"FullyQualifiedName~DotNetEnv.Tests.EnvTests.BadSyntaxTest\" dotnet test --filter \"FullyQualifiedName~DotNetEnv.Tests.ParserTests.ParseAssignment\" src/DotNetEnvEnv/Env.cs is the entry point for all behavior. src/DotNetEnvEnv/Parsers.cs defines all the Sprache parsers. The DotNetEnvTraverse.Tests project tests loading .env files in parent (or higher) directories from the executable. Open a PR on Github if you have some changes, or an issue if you want to discuss some proposed changes before creating a PR for them. License This project is licensed under the MIT license. See the LICENSE file for more info."
  },
  "packages/Microsoft.Extensions.Configuration.9.0.5/PACKAGE.html": {
    "href": "packages/Microsoft.Extensions.Configuration.9.0.5/PACKAGE.html",
    "title": "| Monsieur Momo",
    "summary": "About Microsoft.Extensions.Configuration is combined with a core configuration abstraction under Microsoft.Extensions.Configuration.Abstractions that allows for building different kinds of configuration providers to retrieve key/value pair configuration values from in the form of IConfiguration. There are a number of built-in configuration provider implementations to read from environment variables, in-memory collections, JSON, INI or XML files. Aside from the built-in variations, there are more shipped libraries shipped by community for integration with various configuration service and other data sources. Key Features In-memory configuration provider Chained configuration provider for chaining multiple confiugration providers together. Base types that implement configuration abstraction interfaces that can be used when implementing other configuration providers. How to Use using Microsoft.Extensions.Configuration; var configurationBuilder = new ConfigurationBuilder(); configurationBuilder.AddInMemoryCollection( new Dictionary<string, string?> { [\"Setting1\"] = \"value\", [\"MyOptions:Enabled\"] = bool.TrueString, }); configurationBuilder.AddInMemoryCollection( new Dictionary<string, string?> { [\"Setting2\"] = \"value2\", [\"MyOptions:Enabled\"] = bool.FalseString, }); var config = configurationBuilder.Build(); // note case-insensitive Console.WriteLine(config[\"setting1\"]); Console.WriteLine(config[\"setting2\"]); // note last in wins Console.WriteLine(config[\"MyOptions:Enabled\"]); Main Types The main types provided by this library are: Microsoft.Extensions.Configuration.ConfigurationBuilder Microsoft.Extensions.Configuration.ConfigurationManager Microsoft.Extensions.Configuration.ConfigurationRoot Microsoft.Extensions.Configuration.ConfigurationSection Additional Documentation Configuration in .NET Microsoft.Extensions.Configuration namespace Related Packages Microsoft.Extensions.Configuration.Binder Microsoft.Extensions.Configuration.CommandLine Microsoft.Extensions.Configuration.EnvironmentVariables Microsoft.Extensions.Configuration.FileExtensions Microsoft.Extensions.Configuration.Ini Microsoft.Extensions.Configuration.Json Microsoft.Extensions.Configuration.UserSecrets Microsoft.Extensions.Configuration.Xml Feedback & Contributing Microsoft.Extensions.Configuration is released as open source under the MIT license. Bug reports and contributions are welcome at the GitHub repository."
  },
  "packages/Microsoft.Extensions.Configuration.Abstractions.9.0.5/PACKAGE.html": {
    "href": "packages/Microsoft.Extensions.Configuration.Abstractions.9.0.5/PACKAGE.html",
    "title": "| Monsieur Momo",
    "summary": "About Provides abstractions of key-value pair based configuration. Interfaces defined in this package are implemented by classes in Microsoft.Extensions.Configuration and other configuration packages. Key Features Abstractions for string key-value pair configuration sources and sections Path conventions of keys establishing a heirachy of values Support for multiple configuration sources, aggregating and defining precdence for values Support for reload on change How to Use The example below shows a small code sample using this library and trying out the ConfigurationKeyName attribute available since .NET 6: public class MyClass { [ConfigurationKeyName(\"named_property\")] public string NamedProperty { get; set; } } Given the simple class above, we can create a dictionary to hold the configuration data and use it as the memory source to build a configuration section: var dic = new Dictionary<string, string> { {\"named_property\", \"value for named property\"}, }; var config = new ConfigurationBuilder() .AddInMemoryCollection(dic) .Build(); var options = config.Get<MyClass>(); Console.WriteLine(options.NamedProperty); // returns \"value for named property\" Main Types The main types provided by this library are: Microsoft.Extensions.Configuration.IConfiguration Microsoft.Extensions.Configuration.IConfigurationBuilder Microsoft.Extensions.Configuration.IConfigurationProvider Microsoft.Extensions.Configuration.IConfigurationRoot Microsoft.Extensions.Configuration.IConfigurationSection Additional Documentation Configuration in .NET API documentation Related Packages Microsoft.Extensions.Configuration Microsoft.Extensions.Configuration.Binder Microsoft.Extensions.Configuration.CommandLine Microsoft.Extensions.Configuration.EnvironmentVariables Microsoft.Extensions.Configuration.FileExtensions Microsoft.Extensions.Configuration.Ini Microsoft.Extensions.Configuration.Json Microsoft.Extensions.Configuration.UserSecrets Microsoft.Extensions.Configuration.Xml Feedback & Contributing Microsoft.Extensions.Caching.Abstractions is released as open source under the MIT license. Bug reports and contributions are welcome at the GitHub repository."
  },
  "packages/Microsoft.Extensions.Primitives.9.0.5/PACKAGE.html": {
    "href": "packages/Microsoft.Extensions.Primitives.9.0.5/PACKAGE.html",
    "title": "| Monsieur Momo",
    "summary": "About Microsoft.Extensions.Primitives contains isolated types that are used in many places within console or ASP.NET Core applications using framework extensions. Key Features IChangeToken: An interface that represents a token that can notify when a change occurs. This can be used to trigger actions or invalidate caches when something changes. For example, the configuration and file providers libraries use this interface to reload settings or files when they are modified. StringValues: A struct that represents a single string or an array of strings. This can be used to efficiently store and manipulate multiple values that are logically a single value. For example, the HTTP headers and query strings libraries use this struct to handle multiple values for the same key. StringSegment: A struct that represents a substring of another string. This can be used to avoid allocating new strings when performing operations on parts of a string. For example, the configuration and logging libraries use this struct to parse and format strings. How to Use IChangeToken with configuration example using Microsoft.Extensions.Configuration; using Microsoft.Extensions.Primitives; using System; class Program { static void Main(string[] args) { // Create a configuration builder var configurationBuilder = new ConfigurationBuilder() .SetBasePath(Environment.CurrentDirectory) // appsettings.json expected to have the following contents: // { // \"SomeKey\": \"SomeValue\" // } .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true); // Build the configuration IConfiguration configuration = configurationBuilder.Build(); // Create a change token for the configuration IChangeToken changeToken = configuration.GetReloadToken(); // Attach a change callback IDisposable changeTokenRegistration = changeToken.RegisterChangeCallback(state => { Console.WriteLine(\"Configuration changed!\"); IConfigurationRoot root = (IConfigurationRoot)state; var someValue = root[\"SomeKey\"]; // Access the updated configuration value Console.WriteLine($\"New value of SomeKey: {someValue}\"); }, configuration); // go and update the value of the key SomeKey in appsettings.json. // The change callback will be invoked when the file is saved. Console.WriteLine(\"Listening for configuration changes. Press any key to exit.\"); Console.ReadKey(); // Clean up the change token registration when no longer needed changeTokenRegistration.Dispose(); } } StringValues example using System; using Microsoft.Extensions.Primitives; namespace StringValuesSample { class Program { static void Main(string[] args) { // Create a StringValues object from a single string or an array of strings StringValues single = \"Hello\"; StringValues multiple = new string[] { \"Hello\", \"World\" }; // Use the implicit conversion to string or the ToString method to get the values Console.WriteLine($\"Single: {single}\"); // Single: Hello Console.WriteLine($\"Multiple: {multiple}\"); // Multiple: Hello,World // Use the indexer, the Count property, and the IsNullOrEmpty method to access the values Console.WriteLine($\"Multiple[1]: {multiple[1]}\"); // Multiple[1]: World Console.WriteLine($\"Single.Count: {single.Count}\"); // Single.Count: 1 Console.WriteLine($\"Multiple.IsNullOrEmpty: {StringValues.IsNullOrEmpty(multiple)}\"); // Multiple.IsNullOrEmpty: False // Use the Equals method or the == operator to compare two StringValues objects Console.WriteLine($\"single == \\\"Hello\\\": {single == \"Hello\"}\"); // single == \"Hello\": True Console.WriteLine($\"multiple == \\\"Hello\\\": {multiple == \"Hello\"}\"); // multiple == \"Hello\": False } } } Main Types The main types provided by this library are: IChangeToken StringValues StringSegment Additional Documentation Conceptual documentation API documentation Related Packages Microsoft.Extensions.Configuration Feedback & Contributing Microsoft.Extensions.Primitives is released as open source under the MIT license. Bug reports and contributions are welcome at the GitHub repository."
  },
  "packages/Newtonsoft.Json.13.0.3/LICENSE.html": {
    "href": "packages/Newtonsoft.Json.13.0.3/LICENSE.html",
    "title": "| Monsieur Momo",
    "summary": "The MIT License (MIT) Copyright (c) 2007 James Newton-King Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "packages/Newtonsoft.Json.13.0.3/README.html": {
    "href": "packages/Newtonsoft.Json.13.0.3/README.html",
    "title": "Json.NET | Monsieur Momo",
    "summary": "Json.NET Json.NET is a popular high-performance JSON framework for .NET Serialize JSON Product product = new Product(); product.Name = \"Apple\"; product.Expiry = new DateTime(2008, 12, 28); product.Sizes = new string[] { \"Small\" }; string json = JsonConvert.SerializeObject(product); // { // \"Name\": \"Apple\", // \"Expiry\": \"2008-12-28T00:00:00\", // \"Sizes\": [ // \"Small\" // ] // } Deserialize JSON string json = @\"{ 'Name': 'Bad Boys', 'ReleaseDate': '1995-4-7T00:00:00', 'Genres': [ 'Action', 'Comedy' ] }\"; Movie m = JsonConvert.DeserializeObject<Movie>(json); string name = m.Name; // Bad Boys LINQ to JSON JArray array = new JArray(); array.Add(\"Manual text\"); array.Add(new DateTime(2000, 5, 23)); JObject o = new JObject(); o[\"MyArray\"] = array; string json = o.ToString(); // { // \"MyArray\": [ // \"Manual text\", // \"2000-05-23T00:00:00\" // ] // } Links Homepage Documentation NuGet Package Release Notes Contributing Guidelines License Stack Overflow"
  },
  "packages/System.Buffers.4.6.1/PACKAGE.html": {
    "href": "packages/System.Buffers.4.6.1/PACKAGE.html",
    "title": "| Monsieur Momo",
    "summary": "About Provides resource pooling of any type for performance-critical applications that allocate and deallocate objects frequently. Main Types The main types provided by this library are: System.Buffers.ArrayPool Additional Documentation API reference can be found in: https://learn.microsoft.com/en-us/dotnet/api/system.buffers Related Packages ArrayPool is shipped as part of the shared framework starting with .NET Core 3.1. License System.Buffers is released as open source under the MIT license."
  },
  "packages/System.Memory.4.6.3/PACKAGE.html": {
    "href": "packages/System.Memory.4.6.3/PACKAGE.html",
    "title": "| Monsieur Momo",
    "summary": "About Provides types for efficient representation and pooling of managed, stack, and native memory segments and sequences of such segments, along with primitives to parse and format UTF-8 encoded text stored in those memory segments. Main Types The main types provided by this library are: System.Span System.ReadOnlySpan System.Memory System.ReadOnlyMemory System.Buffers.MemoryPool System.Buffers.ReadOnlySequence System.Buffers.Text.Utf8Parser System.Buffers.Text.Utf8Formatter Additional Documentation API reference can be found in: https://learn.microsoft.com/en-us/dotnet/api/system.memory https://learn.microsoft.com/en-us/archive/msdn-magazine/2018/january/csharp-all-about-span-exploring-a-new-net-mainstay Related Packages The types in this assembly are shipped as part of the shared framework starting with .NET Core 3.1. License System.Memory is released as open source under the MIT license."
  },
  "packages/System.Numerics.Vectors.4.6.1/PACKAGE.html": {
    "href": "packages/System.Numerics.Vectors.4.6.1/PACKAGE.html",
    "title": "| Monsieur Momo",
    "summary": "About Provides hardware-accelerated numeric types, suitable for high-performance processing and graphics applications. Main Types The main types provided by this library are: System.Numerics.Matrix3x2 System.Numerics.Matrix4x4 System.Numerics.Plane System.Numerics.Quaternion System.Numerics.Vector2 System.Numerics.Vector3 System.Numerics.Vector4 System.Numerics.Vector System.Numerics.Vector Additional Documentation API reference can be found in: https://learn.microsoft.com/en-us/dotnet/api/system.numerics.vectors License System.Numerics.Vectors is released as open source under the MIT license."
  },
  "packages/System.Runtime.CompilerServices.Unsafe.6.1.2/PACKAGE.html": {
    "href": "packages/System.Runtime.CompilerServices.Unsafe.6.1.2/PACKAGE.html",
    "title": "| Monsieur Momo",
    "summary": "About Provides the System.Runtime.CompilerServices.Unsafe class, which provides generic, low-level functionality for manipulating pointers and managed byrefs. Main Types The main types provided by this library are: System.Runtime.CompilerServices.Unsafe Additional Documentation API reference can be found in: https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe License System.Runtime.CompilerServices.Unsafe is released as open source under the MIT license."
  },
  "packages/System.ValueTuple.4.6.1/PACKAGE.html": {
    "href": "packages/System.ValueTuple.4.6.1/PACKAGE.html",
    "title": "| Monsieur Momo",
    "summary": "About Provides implementations for various value tuple variants. A value tuple is a data structure that has a specific number and sequence of values. Main Types The main types provided by this library are: System.ValueTuple System.ValueTuple<T1> System.ValueTuple<T1,T2> System.ValueTuple<T1,T2,T3> System.ValueTuple<T1,T2,T3,T4> System.ValueTuple<T1,T2,T3,T4,T5> System.ValueTuple<T1,T2,T3,T4,T5,T6> System.ValueTuple<T1,T2,T3,T4,T5,T6,T7> System.ValueTuple<T1,T2,T3,T4,T5,T6,T7,TRest> System.TupleExtensions System.Runtime.CompilerServices.TupleElementNamesAttribute Additional Documentation For more information about these APIs, see Value tuples. License System.ValueTuple is released as open source under the MIT license."
  }
}